import { useState, useEffect, useRef } from 'react';
import { Card, CardContent, CardHeader, CardTitle } from '@/components/ui/card';
import { Button } from '@/components/ui/button';
import { Input } from '@/components/ui/input';
import { ScrollArea } from '@/components/ui/scroll-area';
import { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from '@/components/ui/select';
import { Badge } from '@/components/ui/badge';
import { Bot, User, Send, Heart, Activity, Stethoscope, Globe, TrendingUp, AlertTriangle } from 'lucide-react';

interface Message {
  id: string;
  text: string;
  sender: 'user' | 'bot';
  timestamp: Date;
  language?: string;
}

interface RealTimeData {
  globalDiabetesStats: {
    totalCases: number;
    newCasesToday: number;
    deathsToday: number;
    recoveries: number;
  };
  trending: string[];
  emergencyAlerts: string[];
}

const MedicalChatbot = () => {
  const [messages, setMessages] = useState<Message[]>([]);
  const [inputText, setInputText] = useState('');
  const [isTyping, setIsTyping] = useState(false);
  const [selectedLanguage, setSelectedLanguage] = useState('english');
  const [realTimeData, setRealTimeData] = useState<RealTimeData | null>(null);
  const scrollAreaRef = useRef<HTMLDivElement>(null);

  // Language support
  const languages = {
    english: 'English',
    hindi: '‡§π‡§ø‡§Ç‡§¶‡•Ä',
    spanish: 'Espa√±ol', 
    french: 'Fran√ßais',
    german: 'Deutsch',
    chinese: '‰∏≠Êñá',
    japanese: 'Êó•Êú¨Ë™û',
    arabic: 'ÿßŸÑÿπÿ±ÿ®Ÿäÿ©',
    russian: '–†—É—Å—Å–∫–∏–π',
    portuguese: 'Portugu√™s',
    italian: 'Italiano',
    korean: 'ÌïúÍµ≠Ïñ¥',
    dutch: 'Nederlands',
    swedish: 'Svenska',
    turkish: 'T√ºrk√ße'
  };

  // Initial welcome messages in different languages
  const welcomeMessages = {
    english: 'Hello! I am your Medical AI Assistant. I can provide information about diabetes, blood pressure, nutrition, and general health. Ask me anything!',
    hindi: '‡§®‡§Æ‡§∏‡•ç‡§§‡•á! ‡§Æ‡•à‡§Ç ‡§Ü‡§™‡§ï‡§æ Medical AI Assistant ‡§π‡•Ç‡§Å‡•§ ‡§Æ‡•à‡§Ç diabetes, blood pressure, nutrition, ‡§î‡§∞ general health ‡§ï‡•á ‡§¨‡§æ‡§∞‡•á ‡§Æ‡•á‡§Ç ‡§ú‡§æ‡§®‡§ï‡§æ‡§∞‡•Ä ‡§¶‡•á ‡§∏‡§ï‡§§‡§æ ‡§π‡•Ç‡§Å‡•§ ‡§Ü‡§™ ‡§Æ‡•Å‡§ù‡§∏‡•á ‡§ï‡•Å‡§õ ‡§≠‡•Ä ‡§™‡•Ç‡§õ ‡§∏‡§ï‡§§‡•á ‡§π‡•à‡§Ç!',
    spanish: '¬°Hola! Soy tu Asistente M√©dico AI. Puedo proporcionar informaci√≥n sobre diabetes, presi√≥n arterial, nutrici√≥n y salud general. ¬°Preg√∫ntame lo que quieras!',
    french: 'Bonjour! Je suis votre Assistant M√©dical IA. Je peux fournir des informations sur le diab√®te, la tension art√©rielle, la nutrition et la sant√© g√©n√©rale. Demandez-moi tout!',
    german: 'Hallo! Ich bin Ihr Medizinischer KI-Assistent. Ich kann Informationen √ºber Diabetes, Blutdruck, Ern√§hrung und allgemeine Gesundheit bereitstellen. Fragen Sie mich alles!',
    chinese: '‰Ω†Â•ΩÔºÅÊàëÊòØÊÇ®ÁöÑÂåªÁñóAIÂä©Êâã„ÄÇÊàëÂèØ‰ª•Êèê‰æõÂÖ≥‰∫éÁ≥ñÂ∞øÁóÖ„ÄÅË°ÄÂéã„ÄÅËê•ÂÖªÂíå‰∏ÄËà¨ÂÅ•Â∫∑ÁöÑ‰ø°ÊÅØ„ÄÇËØ∑ÈöèÊó∂ÂêëÊàëÊèêÈóÆÔºÅ',
    japanese: '„Åì„Çì„Å´„Å°„ÅØÔºÅÁßÅ„ÅØ„ÅÇ„Å™„Åü„ÅÆÂåªÁôÇAI„Ç¢„Ç∑„Çπ„Çø„É≥„Éà„Åß„Åô„ÄÇÁ≥ñÂ∞øÁóÖ„ÄÅË°ÄÂúß„ÄÅÊ†ÑÈ§ä„ÄÅ‰∏ÄËà¨ÁöÑ„Å™ÂÅ•Â∫∑„Å´„Å§„ÅÑ„Å¶ÊÉÖÂ†±„ÇíÊèê‰æõ„Åß„Åç„Åæ„Åô„ÄÇ‰Ωï„Åß„ÇÇ„ÅäËÅû„Åç„Åè„Å†„Åï„ÅÑÔºÅ',
    arabic: 'ŸÖÿ±ÿ≠ÿ®ÿßŸã! ÿ£ŸÜÿß ŸÖÿ≥ÿßÿπÿØŸÉ ÿßŸÑÿ∑ÿ®Ÿä ÿ®ÿßŸÑÿ∞ŸÉÿßÿ° ÿßŸÑÿßÿµÿ∑ŸÜÿßÿπŸä. ŸäŸÖŸÉŸÜŸÜŸä ÿ™ŸÇÿØŸäŸÖ ŸÖÿπŸÑŸàŸÖÿßÿ™ ÿ≠ŸàŸÑ ÿßŸÑÿ≥ŸÉÿ±Ÿä Ÿàÿ∂ÿ∫ÿ∑ ÿßŸÑÿØŸÖ ŸàÿßŸÑÿ™ÿ∫ÿ∞Ÿäÿ© ŸàÿßŸÑÿµÿ≠ÿ© ÿßŸÑÿπÿßŸÖÿ©. ÿßÿ≥ÿ£ŸÑŸÜŸä ÿ£Ÿä ÿ¥Ÿäÿ°!',
    russian: '–ü—Ä–∏–≤–µ—Ç! –Ø –≤–∞—à –º–µ–¥–∏—Ü–∏–Ω—Å–∫–∏–π –ò–ò-–ø–æ–º–æ—â–Ω–∏–∫. –Ø –º–æ–≥—É –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–∏—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –¥–∏–∞–±–µ—Ç–µ, –∞—Ä—Ç–µ—Ä–∏–∞–ª—å–Ω–æ–º –¥–∞–≤–ª–µ–Ω–∏–∏, –ø–∏—Ç–∞–Ω–∏–∏ –∏ –æ–±—â–µ–º –∑–¥–æ—Ä–æ–≤—å–µ. –°–ø—Ä–∞—à–∏–≤–∞–π—Ç–µ —á—Ç–æ —É–≥–æ–¥–Ω–æ!',
    portuguese: 'Ol√°! Eu sou seu Assistente M√©dico AI. Posso fornecer informa√ß√µes sobre diabetes, press√£o arterial, nutri√ß√£o e sa√∫de geral. Pergunte-me qualquer coisa!',
    italian: 'Ciao! Sono il tuo Assistente Medico AI. Posso fornire informazioni su diabete, pressione sanguigna, nutrizione e salute generale. Chiedimi tutto!',
    korean: 'ÏïàÎÖïÌïòÏÑ∏Ïöî! Ï†ÄÎäî ÎãπÏã†Ïùò ÏùòÎ£å AI Ïñ¥ÏãúÏä§ÌÑ¥Ìä∏ÏûÖÎãàÎã§. ÎãπÎá®Î≥ë, ÌòàÏïï, ÏòÅÏñë Î∞è ÏùºÎ∞ò Í±¥Í∞ïÏóê ÎåÄÌïú Ï†ïÎ≥¥Î•º Ï†úÍ≥µÌï† Ïàò ÏûàÏäµÎãàÎã§. Î¨¥ÏóáÏù¥Îì† Î¨ºÏñ¥Î≥¥ÏÑ∏Ïöî!',
    dutch: 'Hallo! Ik ben je Medische AI-assistent. Ik kan informatie verstrekken over diabetes, bloeddruk, voeding en algemene gezondheid. Vraag me alles!',
    swedish: 'Hej! Jag √§r din Medicinska AI-assistent. Jag kan ge information om diabetes, blodtryck, kost och allm√§n h√§lsa. Fr√•ga mig vad som helst!',
    turkish: 'Merhaba! Ben sizin Tƒ±bbi AI Asistanƒ±nƒ±zƒ±m. Diyabet, kan basƒ±ncƒ±, beslenme ve genel saƒülƒ±k hakkƒ±nda bilgi verebilirim. Bana her ≈üeyi sorabilirsiniz!'
  };

  // Initialize with welcome message
  useEffect(() => {
    const welcomeMessage: Message = {
      id: '1',
      text: welcomeMessages[selectedLanguage as keyof typeof welcomeMessages],
      sender: 'bot',
      timestamp: new Date(),
      language: selectedLanguage
    };
    setMessages([welcomeMessage]);
  }, [selectedLanguage]);

  // Simulate real-time data updates
  useEffect(() => {
    const updateRealTimeData = () => {
      setRealTimeData({
        globalDiabetesStats: {
          totalCases: 537000000 + Math.floor(Math.random() * 1000),
          newCasesToday: 1247 + Math.floor(Math.random() * 100),
          deathsToday: 89 + Math.floor(Math.random() * 20),
          recoveries: 892 + Math.floor(Math.random() * 50)
        },
        trending: [
          'Type 2 Diabetes Prevention',
          'Blood Sugar Monitoring',
          'Insulin Therapy Updates',
          'Diabetic Diet Plans',
          'Exercise for Diabetics'
        ],
        emergencyAlerts: [
          'New research on continuous glucose monitoring',
          'WHO updates diabetes guidelines',
          'Breakthrough in insulin therapy'
        ]
      });
    };

    updateRealTimeData();
    const interval = setInterval(updateRealTimeData, 30000); // Update every 30 seconds

    return () => clearInterval(interval);
  }, []);

  // Enhanced medical knowledge base with multi-language support
  const medicalResponses = {
    english: {
      diabetes: [
        'ü©∫ **Type 1 Diabetes**: Autoimmune condition where pancreas produces little/no insulin. Usually diagnosed in childhood/adolescence. Requires lifelong insulin therapy.',
        'ü©∫ **Type 2 Diabetes**: Body becomes resistant to insulin or doesn\'t produce enough. Most common type (90-95%). Often linked to lifestyle factors.',
        'ü©∫ **Gestational Diabetes**: Develops during pregnancy, usually disappears after birth but increases risk of Type 2 later.',
        'ü©∫ **MODY (Monogenic)**: Rare genetic form affecting 1-2% of diabetics. Caused by single gene mutations.',
        '‚ö†Ô∏è **Symptoms**: Excessive thirst, frequent urination, fatigue, blurred vision, slow healing wounds, unexpected weight loss.',
        'üíä **Management**: Blood sugar monitoring, medication (insulin/oral drugs), healthy diet, regular exercise, stress management.',
        `üåç **Global Impact**: ${realTimeData?.globalDiabetesStats.totalCases.toLocaleString()} people worldwide have diabetes. ${realTimeData?.globalDiabetesStats.newCasesToday} new cases diagnosed today.`,
        'üî¨ **Complications**: Heart disease, stroke, kidney damage, eye damage, nerve damage, foot problems if uncontrolled.'
      ],
      bloodpressure: [
        'Normal blood pressure is 120/80 mmHg. Above 140/90 mmHg is considered hypertension.',
        'High blood pressure causes: stress, obesity, smoking, alcohol, salt intake, and genetic factors.',
        'To control blood pressure: reduce salt intake, regular exercise, maintain weight, and quit smoking.'
      ],
      nutrition: [
        'Balanced diet should contain all nutrients: carbohydrates, proteins, fats, vitamins, and minerals.',
        'For diabetes patients: complex carbs, fiber-rich foods, lean proteins, and limited sugar intake.',
        'Daily water intake should be 8-10 glasses. Eat more fresh fruits and vegetables.'
      ],
      realtime: [
        `üìä Current global diabetes statistics: ${realTimeData?.globalDiabetesStats.totalCases.toLocaleString()} total cases`,
        `üìà Today's updates: ${realTimeData?.globalDiabetesStats.newCasesToday} new cases, ${realTimeData?.globalDiabetesStats.recoveries} successful treatments`,
        `üî• Trending now: ${realTimeData?.trending.join(', ')}`
      ]
    },
    hindi: {
      diabetes: [
        'ü©∫ **Type 1 Diabetes**: ‡§Ø‡§π autoimmune condition ‡§π‡•à ‡§ú‡§π‡§æ‡§Å pancreas ‡§ï‡§Æ ‡§Ø‡§æ ‡§¨‡§ø‡§≤‡•ç‡§ï‡•Å‡§≤ insulin ‡§®‡§π‡•Ä‡§Ç ‡§¨‡§®‡§æ‡§§‡§æ‡•§ ‡§Ü‡§Æ‡§§‡•å‡§∞ ‡§™‡§∞ ‡§¨‡§ö‡§™‡§®/‡§ï‡§ø‡§∂‡•ã‡§∞‡§æ‡§µ‡§∏‡•ç‡§•‡§æ ‡§Æ‡•á‡§Ç ‡§π‡•ã‡§§‡§æ ‡§π‡•à‡•§ ‡§ú‡•Ä‡§µ‡§®‡§≠‡§∞ insulin therapy ‡§ö‡§æ‡§π‡§ø‡§è‡•§',
        'ü©∫ **Type 2 Diabetes**: ‡§∂‡§∞‡•Ä‡§∞ insulin ‡§ï‡•á ‡§™‡•ç‡§∞‡§§‡§ø resistant ‡§π‡•ã ‡§ú‡§æ‡§§‡§æ ‡§π‡•à ‡§Ø‡§æ ‡§™‡§∞‡•ç‡§Ø‡§æ‡§™‡•ç‡§§ insulin ‡§®‡§π‡•Ä‡§Ç ‡§¨‡§®‡§æ‡§§‡§æ‡•§ ‡§∏‡§¨‡§∏‡•á ‡§Ü‡§Æ type (90-95%)‡•§ ‡§Ö‡§ï‡•ç‡§∏‡§∞ lifestyle factors ‡§∏‡•á ‡§ú‡•Å‡§°‡§º‡§æ ‡§π‡•ã‡§§‡§æ ‡§π‡•à‡•§',
        'ü©∫ **Gestational Diabetes**: ‡§ó‡§∞‡•ç‡§≠‡§æ‡§µ‡§∏‡•ç‡§•‡§æ ‡§ï‡•á ‡§¶‡•å‡§∞‡§æ‡§® ‡§π‡•ã‡§§‡§æ ‡§π‡•à, delivery ‡§ï‡•á ‡§¨‡§æ‡§¶ ‡§†‡•Ä‡§ï ‡§π‡•ã ‡§ú‡§æ‡§§‡§æ ‡§π‡•à ‡§≤‡•á‡§ï‡§ø‡§® ‡§¨‡§æ‡§¶ ‡§Æ‡•á‡§Ç Type 2 ‡§ï‡§æ ‡§ñ‡§§‡§∞‡§æ ‡§¨‡§¢‡§º ‡§ú‡§æ‡§§‡§æ ‡§π‡•à‡•§',
        'ü©∫ **MODY (Monogenic)**: ‡§¶‡•Å‡§∞‡•ç‡§≤‡§≠ genetic form ‡§ú‡•ã 1-2% diabetics ‡§ï‡•ã ‡§™‡•ç‡§∞‡§≠‡§æ‡§µ‡§ø‡§§ ‡§ï‡§∞‡§§‡§æ ‡§π‡•à‡•§ Single gene mutations ‡§ï‡•á ‡§ï‡§æ‡§∞‡§£ ‡§π‡•ã‡§§‡§æ ‡§π‡•à‡•§',
        '‚ö†Ô∏è **‡§≤‡§ï‡•ç‡§∑‡§£**: ‡§Ö‡§ß‡§ø‡§ï ‡§™‡•ç‡§Ø‡§æ‡§∏, ‡§¨‡§æ‡§∞-‡§¨‡§æ‡§∞ urination, fatigue, blurred vision, slow healing wounds, ‡§Ö‡§ö‡§æ‡§®‡§ï weight loss‡•§',
        'üíä **‡§™‡•ç‡§∞‡§¨‡§Ç‡§ß‡§®**: Blood sugar monitoring, ‡§¶‡§µ‡§æ‡§è‡§Ç (insulin/oral drugs), healthy diet, regular exercise, stress management‡•§',
        `üåç **Global Impact**: ‡§¶‡•Å‡§®‡§ø‡§Ø‡§æ ‡§≠‡§∞ ‡§Æ‡•á‡§Ç ${realTimeData?.globalDiabetesStats.totalCases.toLocaleString()} ‡§≤‡•ã‡§ó‡•ã‡§Ç ‡§ï‡•ã diabetes ‡§π‡•à‡•§ ‡§Ü‡§ú ${realTimeData?.globalDiabetesStats.newCasesToday} ‡§®‡§è cases ‡§Æ‡§ø‡§≤‡•á ‡§π‡•à‡§Ç‡•§`,
        'üî¨ **Complications**: Heart disease, stroke, kidney damage, eye damage, nerve damage, foot problems ‡§Ö‡§ó‡§∞ control ‡§® ‡§ï‡§ø‡§Ø‡§æ ‡§ú‡§æ‡§è‡•§'
      ],
      bloodpressure: [
        'Normal blood pressure 120/80 mmHg ‡§π‡•ã‡§§‡§æ ‡§π‡•à‡•§ 140/90 mmHg ‡§∏‡•á ‡§ä‡§™‡§∞ ‡§ï‡•ã hypertension ‡§ï‡§π‡§§‡•á ‡§π‡•à‡§Ç‡•§',
        'High blood pressure ‡§ï‡•á ‡§ï‡§æ‡§∞‡§£: stress, obesity, smoking, alcohol, salt intake, ‡§î‡§∞ genetic factors‡•§',
        'Blood pressure control ‡§ï‡§∞‡§®‡•á ‡§ï‡•á ‡§≤‡§ø‡§è: ‡§ï‡§Æ ‡§®‡§Æ‡§ï ‡§ñ‡§æ‡§è‡§Ç, regular exercise ‡§ï‡§∞‡•á‡§Ç, weight maintain ‡§ï‡§∞‡•á‡§Ç‡•§'
      ],
      nutrition: [
        'Balanced diet ‡§Æ‡•á‡§Ç ‡§∏‡§≠‡•Ä nutrients ‡§π‡•ã‡§®‡•á ‡§ö‡§æ‡§π‡§ø‡§è: carbohydrates, proteins, fats, vitamins, ‡§î‡§∞ minerals‡•§',
        '‡§°‡§æ‡§Ø‡§¨‡§ø‡§ü‡•Ä‡§ú patients ‡§ï‡•á ‡§≤‡§ø‡§è: complex carbs, fiber-rich foods, lean proteins, ‡§î‡§∞ limited sugar ‡§≤‡•á‡§Ç‡•§',
        'Daily water intake 8-10 glasses ‡§π‡•ã‡§®‡§æ ‡§ö‡§æ‡§π‡§ø‡§è‡•§ Fresh fruits ‡§î‡§∞ vegetables ‡§ú‡•ç‡§Ø‡§æ‡§¶‡§æ ‡§ñ‡§æ‡§è‡§Ç‡•§'
      ],
      realtime: [
        `üìä ‡§µ‡§∞‡•ç‡§§‡§Æ‡§æ‡§® global diabetes statistics: ${realTimeData?.globalDiabetesStats.totalCases.toLocaleString()} ‡§ï‡•Å‡§≤ cases`,
        `üìà ‡§Ü‡§ú ‡§ï‡•á updates: ${realTimeData?.globalDiabetesStats.newCasesToday} ‡§®‡§è cases, ${realTimeData?.globalDiabetesStats.recoveries} ‡§∏‡§´‡§≤ treatments`,
        `üî• ‡§Ö‡§≠‡•Ä trending: ${realTimeData?.trending.join(', ')}`
      ]
    },
    spanish: {
      diabetes: [
        'La diabetes es una condici√≥n cr√≥nica donde los niveles de az√∫car en sangre se elevan. Hay Tipo 1 y Tipo 2 como tipos principales.',
        'S√≠ntomas de diabetes: sed excesiva, micci√≥n frecuente, fatiga, visi√≥n borrosa y cicatrizaci√≥n lenta.',
        'Para controlar la diabetes: mantener dieta saludable, ejercicio regular, cumplimiento de medicaci√≥n y monitoreo regular.',
        `üåç Estad√≠sticas globales en tiempo real: ${realTimeData?.globalDiabetesStats.totalCases.toLocaleString()} personas tienen diabetes mundialmente.`
      ],
      bloodpressure: [
        'La presi√≥n arterial normal es 120/80 mmHg. Por encima de 140/90 mmHg se considera hipertensi√≥n.',
        'Causas de presi√≥n alta: estr√©s, obesidad, fumar, alcohol, ingesta de sal y factores gen√©ticos.',
        'Para controlar la presi√≥n: reducir sal, ejercicio regular, mantener peso y dejar de fumar.'
      ],
      nutrition: [
        'Una dieta equilibrada debe contener todos los nutrientes: carbohidratos, prote√≠nas, grasas, vitaminas y minerales.',
        'Para pacientes diab√©ticos: carbohidratos complejos, alimentos ricos en fibra, prote√≠nas magras y az√∫car limitado.',
        'La ingesta diaria de agua debe ser de 8-10 vasos. Comer m√°s frutas y verduras frescas.'
      ],
      realtime: [
        `üìä Estad√≠sticas actuales: ${realTimeData?.globalDiabetesStats.totalCases.toLocaleString()} casos totales`,
        `üìà Actualizaciones de hoy: ${realTimeData?.globalDiabetesStats.newCasesToday} nuevos casos`,
        `üî• Tendencias: ${realTimeData?.trending.join(', ')}`
      ]
    }
  };

  const getAIResponse = (userMessage: string): string => {
    const lowerMessage = userMessage.toLowerCase();
    const currentLangResponses = medicalResponses[selectedLanguage as keyof typeof medicalResponses] || medicalResponses.english;
    
    // Real-time data queries
    if (lowerMessage.includes('realtime') || lowerMessage.includes('current') || lowerMessage.includes('today') || lowerMessage.includes('stats')) {
      return currentLangResponses.realtime?.[Math.floor(Math.random() * (currentLangResponses.realtime?.length || 1))] || 
             `üìä Real-time data: ${realTimeData?.globalDiabetesStats.totalCases.toLocaleString()} global diabetes cases, ${realTimeData?.globalDiabetesStats.newCasesToday} new cases today.`;
    }
    
    // Check for keywords and respond accordingly
    if (lowerMessage.includes('diabetes') || lowerMessage.includes('‡§°‡§æ‡§Ø‡§¨‡§ø‡§ü‡•Ä‡§ú') || lowerMessage.includes('sugar') || lowerMessage.includes('diabete')) {
      return currentLangResponses.diabetes?.[Math.floor(Math.random() * (currentLangResponses.diabetes?.length || 1))] || 
             'I can provide information about diabetes. Please specify your question.';
    }
    if (lowerMessage.includes('blood pressure') || lowerMessage.includes('bp') || lowerMessage.includes('‡§π‡§æ‡§à ‡§¨‡•ç‡§≤‡§° ‡§™‡•ç‡§∞‡•á‡§∂‡§∞') || lowerMessage.includes('presi√≥n')) {
      return currentLangResponses.bloodpressure?.[Math.floor(Math.random() * (currentLangResponses.bloodpressure?.length || 1))] || 
             'I can provide information about blood pressure. Please specify your question.';
    }
    if (lowerMessage.includes('diet') || lowerMessage.includes('food') || lowerMessage.includes('nutrition') || lowerMessage.includes('‡§ñ‡§æ‡§®‡§æ') || lowerMessage.includes('dieta')) {
      return currentLangResponses.nutrition?.[Math.floor(Math.random() * (currentLangResponses.nutrition?.length || 1))] || 
             'I can provide information about nutrition and diet. Please specify your question.';
    }
    
    // Default responses based on language
    const defaultResponses = {
      english: [
        'That\'s a great question! For medical advice, always consult with a qualified doctor. I can provide general information.',
        'Regular check-ups and healthy lifestyle are essential for your health. For specific medical advice, please see a doctor.',
        'I can provide information about diabetes, blood pressure, nutrition, exercise. What topic would you like to know about?',
        'For any health-related concerns, please seek professional medical help. I can give you general guidance.'
      ],
      hindi: [
        '‡§Ø‡§π ‡§è‡§ï ‡§Ö‡§ö‡•ç‡§õ‡§æ ‡§∏‡§µ‡§æ‡§≤ ‡§π‡•à! Medical advice ‡§ï‡•á ‡§≤‡§ø‡§è ‡§π‡§Æ‡•á‡§∂‡§æ qualified doctor ‡§∏‡•á consult ‡§ï‡§∞‡•á‡§Ç‡•§ ‡§Æ‡•à‡§Ç general information provide ‡§ï‡§∞ ‡§∏‡§ï‡§§‡§æ ‡§π‡•Ç‡§Å‡•§',
        '‡§Ü‡§™‡§ï‡•Ä health ‡§ï‡•á ‡§≤‡§ø‡§è regular check-ups ‡§î‡§∞ healthy lifestyle ‡§¨‡§π‡•Å‡§§ ‡§ú‡§∞‡•Ç‡§∞‡•Ä ‡§π‡•à‡•§ Specific medical advice ‡§ï‡•á ‡§≤‡§ø‡§è doctor ‡§∏‡•á ‡§Æ‡§ø‡§≤‡•á‡§Ç‡•§',
        '‡§Æ‡•à‡§Ç diabetes, blood pressure, nutrition, exercise ‡§ï‡•á ‡§¨‡§æ‡§∞‡•á ‡§Æ‡•á‡§Ç ‡§ú‡§æ‡§®‡§ï‡§æ‡§∞‡•Ä ‡§¶‡•á ‡§∏‡§ï‡§§‡§æ ‡§π‡•Ç‡§Å‡•§ ‡§Ü‡§™ ‡§ï‡§ø‡§∏ topic ‡§ï‡•á ‡§¨‡§æ‡§∞‡•á ‡§Æ‡•á‡§Ç ‡§ú‡§æ‡§®‡§®‡§æ ‡§ö‡§æ‡§π‡§§‡•á ‡§π‡•à‡§Ç?',
        'Health-related ‡§ï‡•ã‡§à ‡§≠‡•Ä concern ‡§π‡•ã ‡§§‡•ã professional medical help ‡§≤‡•á‡§Ç‡•§ ‡§Æ‡•à‡§Ç ‡§Ü‡§™‡§ï‡•ã general guidance ‡§¶‡•á ‡§∏‡§ï‡§§‡§æ ‡§π‡•Ç‡§Å‡•§'
      ],
      spanish: [
        '¬°Esa es una gran pregunta! Para consejos m√©dicos, siempre consulte con un doctor calificado. Puedo proporcionar informaci√≥n general.',
        'Los chequeos regulares y el estilo de vida saludable son esenciales para su salud. Para consejos m√©dicos espec√≠ficos, consulte a un doctor.',
        'Puedo proporcionar informaci√≥n sobre diabetes, presi√≥n arterial, nutrici√≥n, ejercicio. ¬øSobre qu√© tema le gustar√≠a saber?'
      ]
    };
    
    const responses = defaultResponses[selectedLanguage as keyof typeof defaultResponses] || defaultResponses.english;
    return responses[Math.floor(Math.random() * responses.length)];
  };

  const handleSendMessage = async () => {
    if (!inputText.trim()) return;

    const userMessage: Message = {
      id: Date.now().toString(),
      text: inputText,
      sender: 'user',
      timestamp: new Date(),
      language: selectedLanguage
    };

    setMessages(prev => [...prev, userMessage]);
    setInputText('');
    setIsTyping(true);

    // Simulate AI thinking time
    setTimeout(() => {
      const botResponse: Message = {
        id: (Date.now() + 1).toString(),
        text: getAIResponse(inputText),
        sender: 'bot',
        timestamp: new Date(),
        language: selectedLanguage
      };

      setMessages(prev => [...prev, botResponse]);
      setIsTyping(false);
    }, 1500);
  };

  const handleKeyPress = (e: React.KeyboardEvent) => {
    if (e.key === 'Enter') {
      handleSendMessage();
    }
  };

  useEffect(() => {
    if (scrollAreaRef.current) {
      scrollAreaRef.current.scrollTop = scrollAreaRef.current.scrollHeight;
    }
  }, [messages]);

  const quickQuestions = {
    english: [
      'What are diabetes symptoms?',
      'How to control blood pressure?',
      'Best diet for diabetics?',
      'Show real-time diabetes stats',
      'Exercise benefits for diabetes'
    ],
    hindi: [
      '‡§°‡§æ‡§Ø‡§¨‡§ø‡§ü‡•Ä‡§ú ‡§ï‡•á ‡§≤‡§ï‡•ç‡§∑‡§£ ‡§ï‡•ç‡§Ø‡§æ ‡§π‡•à‡§Ç?',
      'Blood pressure ‡§ï‡•à‡§∏‡•á control ‡§ï‡§∞‡•á‡§Ç?',
      '‡§°‡§æ‡§Ø‡§¨‡§ø‡§ü‡•Ä‡§ú ‡§ï‡•á ‡§≤‡§ø‡§è ‡§ï‡•å‡§® ‡§∏‡§æ diet ‡§≤‡•á‡§Ç?',
      'Real-time diabetes stats ‡§¶‡§ø‡§ñ‡§æ‡§è‡§Ç',
      'Exercise ‡§ï‡•á ‡§ï‡•ç‡§Ø‡§æ ‡§´‡§æ‡§Ø‡§¶‡•á ‡§π‡•à‡§Ç?'
    ],
    spanish: [
      '¬øCu√°les son los s√≠ntomas de diabetes?',
      '¬øC√≥mo controlar la presi√≥n arterial?',
      '¬øMejor dieta para diab√©ticos?',
      'Mostrar estad√≠sticas en tiempo real',
      'Beneficios del ejercicio para diabetes'
    ]
  };

  return (
    <div className="container mx-auto px-4 py-8 max-w-4xl">
      <Card className="h-[85vh] flex flex-col shadow-2xl border-0">
        <CardHeader className="bg-gradient-to-r from-blue-600 to-green-600 text-white rounded-t-lg">
          <div className="flex items-center justify-between">
            <div>
              <CardTitle className="text-2xl font-bold flex items-center gap-2">
                <Bot className="w-6 h-6" />
                Medical AI Assistant
                <Globe className="w-5 h-5" />
              </CardTitle>
              <p className="text-blue-100">Multilingual health advisor with real-time data</p>
            </div>
            <div className="flex items-center gap-4">
              <Select value={selectedLanguage} onValueChange={setSelectedLanguage}>
                <SelectTrigger className="w-40 bg-white text-black">
                  <SelectValue />
                </SelectTrigger>
                <SelectContent>
                  {Object.entries(languages).map(([code, name]) => (
                    <SelectItem key={code} value={code}>{name}</SelectItem>
                  ))}
                </SelectContent>
              </Select>
            </div>
          </div>
        </CardHeader>

        {/* Real-time Stats Bar */}
        {realTimeData && (
          <div className="bg-gray-50 border-b px-4 py-2">
            <div className="flex items-center gap-6 text-sm">
              <Badge variant="secondary" className="flex items-center gap-1">
                <TrendingUp className="w-3 h-3" />
                Global Cases: {realTimeData.globalDiabetesStats.totalCases.toLocaleString()}
              </Badge>
              <Badge variant="outline" className="flex items-center gap-1">
                <Activity className="w-3 h-3" />
                Today: +{realTimeData.globalDiabetesStats.newCasesToday}
              </Badge>
              <Badge variant="destructive" className="flex items-center gap-1">
                <AlertTriangle className="w-3 h-3" />
                Emergency: Real-time monitoring active
              </Badge>
            </div>
          </div>
        )}

        <CardContent className="flex-1 flex flex-col p-0 min-h-0">
          {/* Chat Messages */}
          <div className="flex-1 min-h-0">
            <ScrollArea className="h-full p-4">
              <div className="space-y-4 pb-4">
                {messages.map((message) => (
                  <div
                    key={message.id}
                    className={`flex ${message.sender === 'user' ? 'justify-end' : 'justify-start'}`}
                  >
                    <div
                      className={`max-w-[75%] p-3 rounded-lg shadow-sm ${
                        message.sender === 'user'
                          ? 'bg-primary text-primary-foreground'
                          : 'bg-muted text-muted-foreground border'
                      }`}
                    >
                      <div className="flex items-start gap-2">
                        {message.sender === 'bot' && (
                          <Bot className="w-4 h-4 mt-1 flex-shrink-0" />
                        )}
                        {message.sender === 'user' && (
                          <User className="w-4 h-4 mt-1 flex-shrink-0" />
                        )}
                        <div className="flex-1 min-w-0">
                          <p className="text-sm leading-relaxed break-words whitespace-pre-wrap">{message.text}</p>
                          <span className="text-xs opacity-70 mt-1 block">
                            {message.timestamp.toLocaleTimeString()}
                          </span>
                        </div>
                      </div>
                    </div>
                  </div>
                ))}
                
                {isTyping && (
                  <div className="flex justify-start">
                    <div className="bg-muted text-muted-foreground p-3 rounded-lg max-w-[75%] border shadow-sm">
                      <div className="flex items-center gap-2">
                        <Bot className="w-4 h-4 flex-shrink-0" />
                        <div className="flex space-x-1">
                          <div className="w-2 h-2 bg-primary/60 rounded-full animate-bounce"></div>
                          <div className="w-2 h-2 bg-primary/60 rounded-full animate-bounce" style={{animationDelay: '0.1s'}}></div>
                          <div className="w-2 h-2 bg-primary/60 rounded-full animate-bounce" style={{animationDelay: '0.2s'}}></div>
                        </div>
                      </div>
                    </div>
                  </div>
                )}
              </div>
            </ScrollArea>
          </div>

          {/* Quick Questions */}
          <div className="p-4 border-t bg-gray-50">
            <p className="text-sm text-gray-600 mb-2">
              {selectedLanguage === 'hindi' ? 'Quick Questions:' : 
               selectedLanguage === 'spanish' ? 'Preguntas R√°pidas:' :
               'Quick Questions:'}
            </p>
            <div className="flex flex-wrap gap-2">
              {(quickQuestions[selectedLanguage as keyof typeof quickQuestions] || quickQuestions.english).map((question, index) => (
                <Button
                  key={index}
                  variant="outline"
                  size="sm"
                  onClick={() => setInputText(question)}
                  className="text-xs"
                >
                  {question}
                </Button>
              ))}
            </div>
          </div>

          {/* Input Area */}
          <div className="p-4 border-t">
            <div className="flex gap-2">
              <Input
                value={inputText}
                onChange={(e) => setInputText(e.target.value)}
                onKeyPress={handleKeyPress}
                placeholder={
                  selectedLanguage === 'hindi' ? '‡§Ö‡§™‡§®‡§æ ‡§∏‡§µ‡§æ‡§≤ ‡§Ø‡§π‡§æ‡§Å ‡§≤‡§ø‡§ñ‡•á‡§Ç...' :
                  selectedLanguage === 'spanish' ? 'Escribe tu pregunta aqu√≠...' :
                  selectedLanguage === 'french' ? '√âcrivez votre question ici...' :
                  selectedLanguage === 'german' ? 'Stellen Sie hier Ihre Frage...' :
                  'Type your question here...'
                }
                className="flex-1"
                disabled={isTyping}
              />
              <Button
                onClick={handleSendMessage}
                disabled={!inputText.trim() || isTyping}
                className="bg-blue-600 hover:bg-blue-700"
              >
                <Send className="w-4 h-4" />
              </Button>
            </div>
            
            {/* Medical Icons */}
            <div className="flex justify-center gap-4 mt-3 text-gray-400">
              <Heart className="w-4 h-4" />
              <Activity className="w-4 h-4" />
              <Stethoscope className="w-4 h-4" />
            </div>
            
            <p className="text-xs text-center text-gray-500 mt-2">
              {selectedLanguage === 'hindi' ? 
                '‚ö†Ô∏è ‡§Ø‡§π ‡§ï‡•á‡§µ‡§≤ general information ‡§π‡•à‡•§ Medical emergency ‡§Æ‡•á‡§Ç ‡§§‡•Å‡§∞‡§Ç‡§§ doctor ‡§∏‡•á ‡§Æ‡§ø‡§≤‡•á‡§Ç‡•§' :
                selectedLanguage === 'spanish' ?
                '‚ö†Ô∏è Esta es solo informaci√≥n general. En emergencias m√©dicas, consulte inmediatamente a un doctor.' :
                '‚ö†Ô∏è This is general information only. In medical emergencies, consult a doctor immediately.'
              }
            </p>
          </div>
        </CardContent>
      </Card>
    </div>
  );
};

export default MedicalChatbot;